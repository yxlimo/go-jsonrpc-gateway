// Code generated by protoc-gen-jsonrpc-gateway. DO NOT EDIT.
// source: test/proto/everything/a_bit_of_everything.proto

// Package proto is a reverse proxy.

// It translates gRPC into JSON-RPC APIs.
package proto

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"net/http"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/yxlimo/go-jsonrpc-gateway/jsonrpc"
	"github.com/yxlimo/go-jsonrpc-gateway/test/proto/pathenum"
	"github.com/yxlimo/go-jsonrpc-gateway/test/proto/sub"
	"github.com/yxlimo/go-jsonrpc-gateway/test/proto/sub2"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/grpclog"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/durationpb"
	"google.golang.org/protobuf/types/known/emptypb"
)

// Suppress "imported and not used" errors
var _ codes.Code
var _ io.Reader
var _ status.Status
var _ = runtime.String
var _ = metadata.Join
var _ = json.Marshal
var _ = jsonrpc.NewHTTPServerConn

func request_ABitOfEverythingService_Create_jsonrpc(ctx context.Context, marshaler runtime.Marshaler, client ABitOfEverythingServiceClient, raw json.RawMessage) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ABitOfEverything
	var metadata runtime.ServerMetadata
	if err := marshaler.NewDecoder(bytes.NewReader(raw)).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.Create(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func request_ABitOfEverythingService_CreateBody_jsonrpc(ctx context.Context, marshaler runtime.Marshaler, client ABitOfEverythingServiceClient, raw json.RawMessage) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ABitOfEverything
	var metadata runtime.ServerMetadata
	if err := marshaler.NewDecoder(bytes.NewReader(raw)).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.CreateBody(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func request_ABitOfEverythingService_CreateBook_jsonrpc(ctx context.Context, marshaler runtime.Marshaler, client ABitOfEverythingServiceClient, raw json.RawMessage) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateBookRequest
	var metadata runtime.ServerMetadata
	if err := marshaler.NewDecoder(bytes.NewReader(raw)).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.CreateBook(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func request_ABitOfEverythingService_UpdateBook_jsonrpc(ctx context.Context, marshaler runtime.Marshaler, client ABitOfEverythingServiceClient, raw json.RawMessage) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateBookRequest
	var metadata runtime.ServerMetadata
	if err := marshaler.NewDecoder(bytes.NewReader(raw)).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.UpdateBook(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func request_ABitOfEverythingService_Lookup_jsonrpc(ctx context.Context, marshaler runtime.Marshaler, client ABitOfEverythingServiceClient, raw json.RawMessage) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq sub2.IdMessage
	var metadata runtime.ServerMetadata
	if err := marshaler.NewDecoder(bytes.NewReader(raw)).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.Lookup(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func request_ABitOfEverythingService_Update_jsonrpc(ctx context.Context, marshaler runtime.Marshaler, client ABitOfEverythingServiceClient, raw json.RawMessage) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ABitOfEverything
	var metadata runtime.ServerMetadata
	if err := marshaler.NewDecoder(bytes.NewReader(raw)).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.Update(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func request_ABitOfEverythingService_UpdateV2_jsonrpc(ctx context.Context, marshaler runtime.Marshaler, client ABitOfEverythingServiceClient, raw json.RawMessage) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateV2Request
	var metadata runtime.ServerMetadata
	if err := marshaler.NewDecoder(bytes.NewReader(raw)).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.UpdateV2(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func request_ABitOfEverythingService_Delete_jsonrpc(ctx context.Context, marshaler runtime.Marshaler, client ABitOfEverythingServiceClient, raw json.RawMessage) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq sub2.IdMessage
	var metadata runtime.ServerMetadata
	if err := marshaler.NewDecoder(bytes.NewReader(raw)).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.Delete(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func request_ABitOfEverythingService_GetQuery_jsonrpc(ctx context.Context, marshaler runtime.Marshaler, client ABitOfEverythingServiceClient, raw json.RawMessage) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ABitOfEverything
	var metadata runtime.ServerMetadata
	if err := marshaler.NewDecoder(bytes.NewReader(raw)).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.GetQuery(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func request_ABitOfEverythingService_GetRepeatedQuery_jsonrpc(ctx context.Context, marshaler runtime.Marshaler, client ABitOfEverythingServiceClient, raw json.RawMessage) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ABitOfEverythingRepeated
	var metadata runtime.ServerMetadata
	if err := marshaler.NewDecoder(bytes.NewReader(raw)).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.GetRepeatedQuery(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func request_ABitOfEverythingService_Echo_jsonrpc(ctx context.Context, marshaler runtime.Marshaler, client ABitOfEverythingServiceClient, raw json.RawMessage) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq sub.StringMessage
	var metadata runtime.ServerMetadata
	if err := marshaler.NewDecoder(bytes.NewReader(raw)).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.Echo(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func request_ABitOfEverythingService_DeepPathEcho_jsonrpc(ctx context.Context, marshaler runtime.Marshaler, client ABitOfEverythingServiceClient, raw json.RawMessage) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ABitOfEverything
	var metadata runtime.ServerMetadata
	if err := marshaler.NewDecoder(bytes.NewReader(raw)).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.DeepPathEcho(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func request_ABitOfEverythingService_NoBindings_jsonrpc(ctx context.Context, marshaler runtime.Marshaler, client ABitOfEverythingServiceClient, raw json.RawMessage) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq durationpb.Duration
	var metadata runtime.ServerMetadata
	if err := marshaler.NewDecoder(bytes.NewReader(raw)).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.NoBindings(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func request_ABitOfEverythingService_Timeout_jsonrpc(ctx context.Context, marshaler runtime.Marshaler, client ABitOfEverythingServiceClient, raw json.RawMessage) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq emptypb.Empty
	var metadata runtime.ServerMetadata
	if err := marshaler.NewDecoder(bytes.NewReader(raw)).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.Timeout(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func request_ABitOfEverythingService_ErrorWithDetails_jsonrpc(ctx context.Context, marshaler runtime.Marshaler, client ABitOfEverythingServiceClient, raw json.RawMessage) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq emptypb.Empty
	var metadata runtime.ServerMetadata
	if err := marshaler.NewDecoder(bytes.NewReader(raw)).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.ErrorWithDetails(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func request_ABitOfEverythingService_GetMessageWithBody_jsonrpc(ctx context.Context, marshaler runtime.Marshaler, client ABitOfEverythingServiceClient, raw json.RawMessage) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq MessageWithBody
	var metadata runtime.ServerMetadata
	if err := marshaler.NewDecoder(bytes.NewReader(raw)).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.GetMessageWithBody(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func request_ABitOfEverythingService_PostWithEmptyBody_jsonrpc(ctx context.Context, marshaler runtime.Marshaler, client ABitOfEverythingServiceClient, raw json.RawMessage) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq Body
	var metadata runtime.ServerMetadata
	if err := marshaler.NewDecoder(bytes.NewReader(raw)).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.PostWithEmptyBody(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func request_ABitOfEverythingService_CheckGetQueryParams_jsonrpc(ctx context.Context, marshaler runtime.Marshaler, client ABitOfEverythingServiceClient, raw json.RawMessage) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ABitOfEverything
	var metadata runtime.ServerMetadata
	if err := marshaler.NewDecoder(bytes.NewReader(raw)).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.CheckGetQueryParams(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func request_ABitOfEverythingService_CheckNestedEnumGetQueryParams_jsonrpc(ctx context.Context, marshaler runtime.Marshaler, client ABitOfEverythingServiceClient, raw json.RawMessage) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ABitOfEverything
	var metadata runtime.ServerMetadata
	if err := marshaler.NewDecoder(bytes.NewReader(raw)).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.CheckNestedEnumGetQueryParams(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func request_ABitOfEverythingService_CheckPostQueryParams_jsonrpc(ctx context.Context, marshaler runtime.Marshaler, client ABitOfEverythingServiceClient, raw json.RawMessage) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ABitOfEverything
	var metadata runtime.ServerMetadata
	if err := marshaler.NewDecoder(bytes.NewReader(raw)).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.CheckPostQueryParams(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func request_ABitOfEverythingService_OverwriteResponseContentType_jsonrpc(ctx context.Context, marshaler runtime.Marshaler, client ABitOfEverythingServiceClient, raw json.RawMessage) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq emptypb.Empty
	var metadata runtime.ServerMetadata
	if err := marshaler.NewDecoder(bytes.NewReader(raw)).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.OverwriteResponseContentType(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func request_ABitOfEverythingService_CheckExternalPathEnum_jsonrpc(ctx context.Context, marshaler runtime.Marshaler, client ABitOfEverythingServiceClient, raw json.RawMessage) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq pathenum.MessageWithPathEnum
	var metadata runtime.ServerMetadata
	if err := marshaler.NewDecoder(bytes.NewReader(raw)).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.CheckExternalPathEnum(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func request_ABitOfEverythingService_CheckExternalNestedPathEnum_jsonrpc(ctx context.Context, marshaler runtime.Marshaler, client ABitOfEverythingServiceClient, raw json.RawMessage) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq pathenum.MessageWithNestedPathEnum
	var metadata runtime.ServerMetadata
	if err := marshaler.NewDecoder(bytes.NewReader(raw)).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.CheckExternalNestedPathEnum(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func request_CamelCaseServiceName_Empty_jsonrpc(ctx context.Context, marshaler runtime.Marshaler, client CamelCaseServiceNameClient, raw json.RawMessage) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq emptypb.Empty
	var metadata runtime.ServerMetadata
	if err := marshaler.NewDecoder(bytes.NewReader(raw)).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.Empty(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func request_AnotherServiceWithNoBindings_NoBindings_jsonrpc(ctx context.Context, marshaler runtime.Marshaler, client AnotherServiceWithNoBindingsClient, raw json.RawMessage) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq emptypb.Empty
	var metadata runtime.ServerMetadata
	if err := marshaler.NewDecoder(bytes.NewReader(raw)).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	msg, err := client.NoBindings(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

// RegisterABitOfEverythingServiceJSONRPCHandlerFromEndpoint is same as RegisterABitOfEverythingServiceJSONRPCHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterABitOfEverythingServiceJSONRPCHandlerFromEndpoint(ctx context.Context, mux *jsonrpc.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterABitOfEverythingServiceJSONRPCHandler(ctx, mux, conn)
}

// RegisterABitOfEverythingServiceJSONRPCHandler registers the http handlers for service ABitOfEverythingService to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterABitOfEverythingServiceJSONRPCHandler(ctx context.Context, mux *jsonrpc.ServeMux, conn *grpc.ClientConn) error {
	return RegisterABitOfEverythingServiceJSONRPCHandlerClient(ctx, mux, NewABitOfEverythingServiceClient(conn))
}

// RegisterABitOfEverythingServiceJSONRPCHandlerClient registers the http handlers for service ABitOfEverythingService
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "ABitOfEverythingServiceClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "ABitOfEverythingServiceClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "ABitOfEverythingServiceClient" to call the correct interceptors.
func RegisterABitOfEverythingServiceJSONRPCHandlerClient(ctx context.Context, mux *jsonrpc.ServeMux, client ABitOfEverythingServiceClient) error {

	mux.Register("Create", func(req *http.Request, marshaller runtime.Marshaler, rawBody json.RawMessage) (json.RawMessage, context.Context, error) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux.RuntimeMux(), req, "/jsonrpc.gateway.test.proto.everything.ABitOfEverythingService/Create")
		if err != nil {
			return nil, ctx, err
		}
		resp, md, err := request_ABitOfEverythingService_Create_jsonrpc(ctx, marshaller, client, rawBody)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			return nil, ctx, err
		}
		rawResp, err := marshaller.Marshal(resp)
		if err != nil {
			return nil, ctx, err
		}
		return rawResp, ctx, nil

	})

	mux.Register("CreateBody", func(req *http.Request, marshaller runtime.Marshaler, rawBody json.RawMessage) (json.RawMessage, context.Context, error) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux.RuntimeMux(), req, "/jsonrpc.gateway.test.proto.everything.ABitOfEverythingService/CreateBody")
		if err != nil {
			return nil, ctx, err
		}
		resp, md, err := request_ABitOfEverythingService_CreateBody_jsonrpc(ctx, marshaller, client, rawBody)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			return nil, ctx, err
		}
		rawResp, err := marshaller.Marshal(resp)
		if err != nil {
			return nil, ctx, err
		}
		return rawResp, ctx, nil

	})

	mux.Register("CreateBook", func(req *http.Request, marshaller runtime.Marshaler, rawBody json.RawMessage) (json.RawMessage, context.Context, error) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux.RuntimeMux(), req, "/jsonrpc.gateway.test.proto.everything.ABitOfEverythingService/CreateBook")
		if err != nil {
			return nil, ctx, err
		}
		resp, md, err := request_ABitOfEverythingService_CreateBook_jsonrpc(ctx, marshaller, client, rawBody)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			return nil, ctx, err
		}
		rawResp, err := marshaller.Marshal(resp)
		if err != nil {
			return nil, ctx, err
		}
		return rawResp, ctx, nil

	})

	mux.Register("UpdateBook", func(req *http.Request, marshaller runtime.Marshaler, rawBody json.RawMessage) (json.RawMessage, context.Context, error) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux.RuntimeMux(), req, "/jsonrpc.gateway.test.proto.everything.ABitOfEverythingService/UpdateBook")
		if err != nil {
			return nil, ctx, err
		}
		resp, md, err := request_ABitOfEverythingService_UpdateBook_jsonrpc(ctx, marshaller, client, rawBody)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			return nil, ctx, err
		}
		rawResp, err := marshaller.Marshal(resp)
		if err != nil {
			return nil, ctx, err
		}
		return rawResp, ctx, nil

	})

	mux.Register("Lookup", func(req *http.Request, marshaller runtime.Marshaler, rawBody json.RawMessage) (json.RawMessage, context.Context, error) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux.RuntimeMux(), req, "/jsonrpc.gateway.test.proto.everything.ABitOfEverythingService/Lookup")
		if err != nil {
			return nil, ctx, err
		}
		resp, md, err := request_ABitOfEverythingService_Lookup_jsonrpc(ctx, marshaller, client, rawBody)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			return nil, ctx, err
		}
		rawResp, err := marshaller.Marshal(resp)
		if err != nil {
			return nil, ctx, err
		}
		return rawResp, ctx, nil

	})

	mux.Register("Update", func(req *http.Request, marshaller runtime.Marshaler, rawBody json.RawMessage) (json.RawMessage, context.Context, error) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux.RuntimeMux(), req, "/jsonrpc.gateway.test.proto.everything.ABitOfEverythingService/Update")
		if err != nil {
			return nil, ctx, err
		}
		resp, md, err := request_ABitOfEverythingService_Update_jsonrpc(ctx, marshaller, client, rawBody)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			return nil, ctx, err
		}
		rawResp, err := marshaller.Marshal(resp)
		if err != nil {
			return nil, ctx, err
		}
		return rawResp, ctx, nil

	})

	mux.Register("UpdateV2", func(req *http.Request, marshaller runtime.Marshaler, rawBody json.RawMessage) (json.RawMessage, context.Context, error) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux.RuntimeMux(), req, "/jsonrpc.gateway.test.proto.everything.ABitOfEverythingService/UpdateV2")
		if err != nil {
			return nil, ctx, err
		}
		resp, md, err := request_ABitOfEverythingService_UpdateV2_jsonrpc(ctx, marshaller, client, rawBody)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			return nil, ctx, err
		}
		rawResp, err := marshaller.Marshal(resp)
		if err != nil {
			return nil, ctx, err
		}
		return rawResp, ctx, nil

	})

	mux.Register("Delete", func(req *http.Request, marshaller runtime.Marshaler, rawBody json.RawMessage) (json.RawMessage, context.Context, error) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux.RuntimeMux(), req, "/jsonrpc.gateway.test.proto.everything.ABitOfEverythingService/Delete")
		if err != nil {
			return nil, ctx, err
		}
		resp, md, err := request_ABitOfEverythingService_Delete_jsonrpc(ctx, marshaller, client, rawBody)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			return nil, ctx, err
		}
		rawResp, err := marshaller.Marshal(resp)
		if err != nil {
			return nil, ctx, err
		}
		return rawResp, ctx, nil

	})

	mux.Register("GetQuery", func(req *http.Request, marshaller runtime.Marshaler, rawBody json.RawMessage) (json.RawMessage, context.Context, error) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux.RuntimeMux(), req, "/jsonrpc.gateway.test.proto.everything.ABitOfEverythingService/GetQuery")
		if err != nil {
			return nil, ctx, err
		}
		resp, md, err := request_ABitOfEverythingService_GetQuery_jsonrpc(ctx, marshaller, client, rawBody)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			return nil, ctx, err
		}
		rawResp, err := marshaller.Marshal(resp)
		if err != nil {
			return nil, ctx, err
		}
		return rawResp, ctx, nil

	})

	mux.Register("GetRepeatedQuery", func(req *http.Request, marshaller runtime.Marshaler, rawBody json.RawMessage) (json.RawMessage, context.Context, error) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux.RuntimeMux(), req, "/jsonrpc.gateway.test.proto.everything.ABitOfEverythingService/GetRepeatedQuery")
		if err != nil {
			return nil, ctx, err
		}
		resp, md, err := request_ABitOfEverythingService_GetRepeatedQuery_jsonrpc(ctx, marshaller, client, rawBody)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			return nil, ctx, err
		}
		rawResp, err := marshaller.Marshal(resp)
		if err != nil {
			return nil, ctx, err
		}
		return rawResp, ctx, nil

	})

	mux.Register("Echo", func(req *http.Request, marshaller runtime.Marshaler, rawBody json.RawMessage) (json.RawMessage, context.Context, error) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux.RuntimeMux(), req, "/jsonrpc.gateway.test.proto.everything.ABitOfEverythingService/Echo")
		if err != nil {
			return nil, ctx, err
		}
		resp, md, err := request_ABitOfEverythingService_Echo_jsonrpc(ctx, marshaller, client, rawBody)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			return nil, ctx, err
		}
		rawResp, err := marshaller.Marshal(resp)
		if err != nil {
			return nil, ctx, err
		}
		return rawResp, ctx, nil

	})

	mux.Register("DeepPathEcho", func(req *http.Request, marshaller runtime.Marshaler, rawBody json.RawMessage) (json.RawMessage, context.Context, error) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux.RuntimeMux(), req, "/jsonrpc.gateway.test.proto.everything.ABitOfEverythingService/DeepPathEcho")
		if err != nil {
			return nil, ctx, err
		}
		resp, md, err := request_ABitOfEverythingService_DeepPathEcho_jsonrpc(ctx, marshaller, client, rawBody)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			return nil, ctx, err
		}
		rawResp, err := marshaller.Marshal(resp)
		if err != nil {
			return nil, ctx, err
		}
		return rawResp, ctx, nil

	})

	mux.Register("NoBindings", func(req *http.Request, marshaller runtime.Marshaler, rawBody json.RawMessage) (json.RawMessage, context.Context, error) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux.RuntimeMux(), req, "/jsonrpc.gateway.test.proto.everything.ABitOfEverythingService/NoBindings")
		if err != nil {
			return nil, ctx, err
		}
		resp, md, err := request_ABitOfEverythingService_NoBindings_jsonrpc(ctx, marshaller, client, rawBody)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			return nil, ctx, err
		}
		rawResp, err := marshaller.Marshal(resp)
		if err != nil {
			return nil, ctx, err
		}
		return rawResp, ctx, nil

	})

	mux.Register("Timeout", func(req *http.Request, marshaller runtime.Marshaler, rawBody json.RawMessage) (json.RawMessage, context.Context, error) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux.RuntimeMux(), req, "/jsonrpc.gateway.test.proto.everything.ABitOfEverythingService/Timeout")
		if err != nil {
			return nil, ctx, err
		}
		resp, md, err := request_ABitOfEverythingService_Timeout_jsonrpc(ctx, marshaller, client, rawBody)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			return nil, ctx, err
		}
		rawResp, err := marshaller.Marshal(resp)
		if err != nil {
			return nil, ctx, err
		}
		return rawResp, ctx, nil

	})

	mux.Register("ErrorWithDetails", func(req *http.Request, marshaller runtime.Marshaler, rawBody json.RawMessage) (json.RawMessage, context.Context, error) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux.RuntimeMux(), req, "/jsonrpc.gateway.test.proto.everything.ABitOfEverythingService/ErrorWithDetails")
		if err != nil {
			return nil, ctx, err
		}
		resp, md, err := request_ABitOfEverythingService_ErrorWithDetails_jsonrpc(ctx, marshaller, client, rawBody)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			return nil, ctx, err
		}
		rawResp, err := marshaller.Marshal(resp)
		if err != nil {
			return nil, ctx, err
		}
		return rawResp, ctx, nil

	})

	mux.Register("GetMessageWithBody", func(req *http.Request, marshaller runtime.Marshaler, rawBody json.RawMessage) (json.RawMessage, context.Context, error) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux.RuntimeMux(), req, "/jsonrpc.gateway.test.proto.everything.ABitOfEverythingService/GetMessageWithBody")
		if err != nil {
			return nil, ctx, err
		}
		resp, md, err := request_ABitOfEverythingService_GetMessageWithBody_jsonrpc(ctx, marshaller, client, rawBody)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			return nil, ctx, err
		}
		rawResp, err := marshaller.Marshal(resp)
		if err != nil {
			return nil, ctx, err
		}
		return rawResp, ctx, nil

	})

	mux.Register("PostWithEmptyBody", func(req *http.Request, marshaller runtime.Marshaler, rawBody json.RawMessage) (json.RawMessage, context.Context, error) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux.RuntimeMux(), req, "/jsonrpc.gateway.test.proto.everything.ABitOfEverythingService/PostWithEmptyBody")
		if err != nil {
			return nil, ctx, err
		}
		resp, md, err := request_ABitOfEverythingService_PostWithEmptyBody_jsonrpc(ctx, marshaller, client, rawBody)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			return nil, ctx, err
		}
		rawResp, err := marshaller.Marshal(resp)
		if err != nil {
			return nil, ctx, err
		}
		return rawResp, ctx, nil

	})

	mux.Register("CheckGetQueryParams", func(req *http.Request, marshaller runtime.Marshaler, rawBody json.RawMessage) (json.RawMessage, context.Context, error) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux.RuntimeMux(), req, "/jsonrpc.gateway.test.proto.everything.ABitOfEverythingService/CheckGetQueryParams")
		if err != nil {
			return nil, ctx, err
		}
		resp, md, err := request_ABitOfEverythingService_CheckGetQueryParams_jsonrpc(ctx, marshaller, client, rawBody)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			return nil, ctx, err
		}
		rawResp, err := marshaller.Marshal(resp)
		if err != nil {
			return nil, ctx, err
		}
		return rawResp, ctx, nil

	})

	mux.Register("CheckNestedEnumGetQueryParams", func(req *http.Request, marshaller runtime.Marshaler, rawBody json.RawMessage) (json.RawMessage, context.Context, error) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux.RuntimeMux(), req, "/jsonrpc.gateway.test.proto.everything.ABitOfEverythingService/CheckNestedEnumGetQueryParams")
		if err != nil {
			return nil, ctx, err
		}
		resp, md, err := request_ABitOfEverythingService_CheckNestedEnumGetQueryParams_jsonrpc(ctx, marshaller, client, rawBody)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			return nil, ctx, err
		}
		rawResp, err := marshaller.Marshal(resp)
		if err != nil {
			return nil, ctx, err
		}
		return rawResp, ctx, nil

	})

	mux.Register("CheckPostQueryParams", func(req *http.Request, marshaller runtime.Marshaler, rawBody json.RawMessage) (json.RawMessage, context.Context, error) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux.RuntimeMux(), req, "/jsonrpc.gateway.test.proto.everything.ABitOfEverythingService/CheckPostQueryParams")
		if err != nil {
			return nil, ctx, err
		}
		resp, md, err := request_ABitOfEverythingService_CheckPostQueryParams_jsonrpc(ctx, marshaller, client, rawBody)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			return nil, ctx, err
		}
		rawResp, err := marshaller.Marshal(resp)
		if err != nil {
			return nil, ctx, err
		}
		return rawResp, ctx, nil

	})

	mux.Register("OverwriteResponseContentType", func(req *http.Request, marshaller runtime.Marshaler, rawBody json.RawMessage) (json.RawMessage, context.Context, error) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux.RuntimeMux(), req, "/jsonrpc.gateway.test.proto.everything.ABitOfEverythingService/OverwriteResponseContentType")
		if err != nil {
			return nil, ctx, err
		}
		resp, md, err := request_ABitOfEverythingService_OverwriteResponseContentType_jsonrpc(ctx, marshaller, client, rawBody)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			return nil, ctx, err
		}
		rawResp, err := marshaller.Marshal(resp)
		if err != nil {
			return nil, ctx, err
		}
		return rawResp, ctx, nil

	})

	mux.Register("CheckExternalPathEnum", func(req *http.Request, marshaller runtime.Marshaler, rawBody json.RawMessage) (json.RawMessage, context.Context, error) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux.RuntimeMux(), req, "/jsonrpc.gateway.test.proto.everything.ABitOfEverythingService/CheckExternalPathEnum")
		if err != nil {
			return nil, ctx, err
		}
		resp, md, err := request_ABitOfEverythingService_CheckExternalPathEnum_jsonrpc(ctx, marshaller, client, rawBody)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			return nil, ctx, err
		}
		rawResp, err := marshaller.Marshal(resp)
		if err != nil {
			return nil, ctx, err
		}
		return rawResp, ctx, nil

	})

	mux.Register("CheckExternalNestedPathEnum", func(req *http.Request, marshaller runtime.Marshaler, rawBody json.RawMessage) (json.RawMessage, context.Context, error) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux.RuntimeMux(), req, "/jsonrpc.gateway.test.proto.everything.ABitOfEverythingService/CheckExternalNestedPathEnum")
		if err != nil {
			return nil, ctx, err
		}
		resp, md, err := request_ABitOfEverythingService_CheckExternalNestedPathEnum_jsonrpc(ctx, marshaller, client, rawBody)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			return nil, ctx, err
		}
		rawResp, err := marshaller.Marshal(resp)
		if err != nil {
			return nil, ctx, err
		}
		return rawResp, ctx, nil

	})

	return nil
}

// RegisterCamelCaseServiceNameJSONRPCHandlerFromEndpoint is same as RegisterCamelCaseServiceNameJSONRPCHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterCamelCaseServiceNameJSONRPCHandlerFromEndpoint(ctx context.Context, mux *jsonrpc.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterCamelCaseServiceNameJSONRPCHandler(ctx, mux, conn)
}

// RegisterCamelCaseServiceNameJSONRPCHandler registers the http handlers for service CamelCaseServiceName to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterCamelCaseServiceNameJSONRPCHandler(ctx context.Context, mux *jsonrpc.ServeMux, conn *grpc.ClientConn) error {
	return RegisterCamelCaseServiceNameJSONRPCHandlerClient(ctx, mux, NewCamelCaseServiceNameClient(conn))
}

// RegisterCamelCaseServiceNameJSONRPCHandlerClient registers the http handlers for service CamelCaseServiceName
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "CamelCaseServiceNameClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "CamelCaseServiceNameClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "CamelCaseServiceNameClient" to call the correct interceptors.
func RegisterCamelCaseServiceNameJSONRPCHandlerClient(ctx context.Context, mux *jsonrpc.ServeMux, client CamelCaseServiceNameClient) error {

	mux.Register("Empty", func(req *http.Request, marshaller runtime.Marshaler, rawBody json.RawMessage) (json.RawMessage, context.Context, error) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux.RuntimeMux(), req, "/jsonrpc.gateway.test.proto.everything.CamelCaseServiceName/Empty")
		if err != nil {
			return nil, ctx, err
		}
		resp, md, err := request_CamelCaseServiceName_Empty_jsonrpc(ctx, marshaller, client, rawBody)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			return nil, ctx, err
		}
		rawResp, err := marshaller.Marshal(resp)
		if err != nil {
			return nil, ctx, err
		}
		return rawResp, ctx, nil

	})

	return nil
}

// RegisterAnotherServiceWithNoBindingsJSONRPCHandlerFromEndpoint is same as RegisterAnotherServiceWithNoBindingsJSONRPCHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterAnotherServiceWithNoBindingsJSONRPCHandlerFromEndpoint(ctx context.Context, mux *jsonrpc.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterAnotherServiceWithNoBindingsJSONRPCHandler(ctx, mux, conn)
}

// RegisterAnotherServiceWithNoBindingsJSONRPCHandler registers the http handlers for service AnotherServiceWithNoBindings to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterAnotherServiceWithNoBindingsJSONRPCHandler(ctx context.Context, mux *jsonrpc.ServeMux, conn *grpc.ClientConn) error {
	return RegisterAnotherServiceWithNoBindingsJSONRPCHandlerClient(ctx, mux, NewAnotherServiceWithNoBindingsClient(conn))
}

// RegisterAnotherServiceWithNoBindingsJSONRPCHandlerClient registers the http handlers for service AnotherServiceWithNoBindings
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "AnotherServiceWithNoBindingsClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "AnotherServiceWithNoBindingsClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "AnotherServiceWithNoBindingsClient" to call the correct interceptors.
func RegisterAnotherServiceWithNoBindingsJSONRPCHandlerClient(ctx context.Context, mux *jsonrpc.ServeMux, client AnotherServiceWithNoBindingsClient) error {

	mux.Register("NoBindings", func(req *http.Request, marshaller runtime.Marshaler, rawBody json.RawMessage) (json.RawMessage, context.Context, error) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux.RuntimeMux(), req, "/jsonrpc.gateway.test.proto.everything.AnotherServiceWithNoBindings/NoBindings")
		if err != nil {
			return nil, ctx, err
		}
		resp, md, err := request_AnotherServiceWithNoBindings_NoBindings_jsonrpc(ctx, marshaller, client, rawBody)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			return nil, ctx, err
		}
		rawResp, err := marshaller.Marshal(resp)
		if err != nil {
			return nil, ctx, err
		}
		return rawResp, ctx, nil

	})

	return nil
}
